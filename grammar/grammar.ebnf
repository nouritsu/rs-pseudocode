(* Start Symbol *)
program
    = statement, { NEWLINE, statement};

(* Statements *)
statement
    = stmt_call
    | stmt_assign
    | stmt_input
    | stmt_output
    | stmt_decl
    | stmt_type_def;

stmt_call
    = "CALL", [ OPAREN, arguments, CPAREN ];

stmt_assign
    = lvalue, op_var_assign, expression;

stmt_input
    = "INPUT", lvalue;

stmt_output
    = "OUTPUT", arguments;

stmt_decl
    = declaration;

stmt_type_def
    = type_def;

(* Expressions *)
expression
    = expr_literal
    | expr_variable
    | expr_unary
    | expr_binary
    | expr_grouping
    | expr_call;

expr_literal
    = literal;

expr_variable
    = lvalue;

expr_unary
    = op_expr, expression;

expr_binary
    = expression, op_expr, expression;

expr_grouping
    = OPAREN, expression, CPAREN;

expr_call
    = identifier, OPAREN, [ arguments ], CPAREN;

(* Declarations*)
declaration
    = decl_var
    | decl_const
    | decl_proc
    | decl_func;

decl_var
    = "DECLARE" , identifier, ':', decl_var_type;

decl_const
    = "CONST", identifier, op_const_assign, literal;

decl_var_type
    = decl_var_basic_type
    | "ARRAY", decl_arr_bounds, "OF", decl_var_basic_type;

decl_var_basic_type
    = decl_var_atomic_type
    | identifier;

decl_var_atomic_type
    = "INTEGER"
    | "REAL"
    | "CHAR"
    | "STRING"
    | "BOOLEAN"
    | "DATE";

decl_arr_bounds
    = OSQUARE, ("0" | "1"), ':', literal_integer, { ',', ("0" | "1"), ':', literal_integer }, CSQUARE;

(* Type Definitions *)
type_def
    = "TYPE", identifier, NEWLINE, decl_var, { decl_var }, "ENDTYPE";

(* Literals *)
literal
    = literal_integer
    | literal_real
    | literal_character
    | literal_string
    | literal_boolean
    | literal_date;

literal_integer
    = DIGIT, { DIGIT };

literal_real
    = literal_integer, '.', literal_integer;

literal_character
    = "'", ANY, "'";

literal_string
    = '"', ANY, { ANY }, '"';

literal_boolean
    = "TRUE"
    | "FALSE";

literal_date
    = BTICK, [ 2 *  ], ( [ 2 *  ], ( literal_integer ), "/" ), [ 4 *  ], ( literal_integer ), BTICK;

(* Operators *)
operator
    = ? Math Operators and Logical Operators ?;

op_dot
    = '.';

op_var_assign
    = '<-';

op_const_assign
    = '=';

op_arr_index
    = OSQUARE, literal_integer, {',', literal_integer} CSQUARE;

(* Comments *)
comment
    = "//", { ANY };

(* Miscellaneous *)
lvalue
    = identifier, { op_arr_index | (op_dot, identifier) };

identifier
    = ALPHA
    | UNDSCR, { ALPHA
    | DIGIT
    | UNDSCR };

arguments
    = expression, { ",", expression };

(* Base *)
ALPHANUM
    = ASCII_NUM
    | ASCII_ALPHA;

DIGIT
    = ? ASCII Digit , from 0 to 9 ?;

ALPHA
    = ? ASCII Alphabet , ' a ' to ' z ' and ' A ' to ' Z ' ?;

ANY
    = ? Any Character ?;

OPAREN
    = "(";

CPAREN
    = ")";

OBRACE
    = "{";

CBRACE
    = "}";

OSQUARE
    = "[";

CSQUARE
    = "]";

BTICK
    = ? Backtick Character ?;

UNDSCR
    = ? Underscore ?;

NEWLINE
    = ? Newline ?